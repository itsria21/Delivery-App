import android.content.ContentValues
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper

class DatabaseHelper(context: Context) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {

    companion object {
        private const val DATABASE_NAME = "FoodDeliveryApp.db"
        private const val DATABASE_VERSION = 1
        
        // Table names
        const val TABLE_RESTAURANTS = "restaurants"
        const val TABLE_MENU_ITEMS = "menu_items"
        const val TABLE_CART = "cart"
        const val TABLE_ORDERS = "orders"
        
        // Common column names
        const val COLUMN_ID = "id"
        
        // Restaurants table columns
        const val COLUMN_RESTAURANT_NAME = "name"
        const val COLUMN_RESTAURANT_IMAGE = "image"
        const val COLUMN_RESTAURANT_RATING = "rating"
        
        // Menu items table columns
        const val COLUMN_ITEM_NAME = "name"
        const val COLUMN_ITEM_PRICE = "price"
        const val COLUMN_ITEM_IMAGE = "image"
        const val COLUMN_ITEM_RESTAURANT_ID = "restaurant_id"
        
        // Cart table columns
        const val COLUMN_CART_ITEM_ID = "item_id"
        const val COLUMN_CART_QUANTITY = "quantity"
        
        // Orders table columns
        const val COLUMN_ORDER_ITEMS = "items" // JSON string
        const val COLUMN_ORDER_TOTAL = "total"
        const val COLUMN_ORDER_DATE = "date"
    }

    override fun onCreate(db: SQLiteDatabase) {
        // Create restaurants table
        val createRestaurantsTable = """
            CREATE TABLE $TABLE_RESTAURANTS (
                $COLUMN_ID TEXT PRIMARY KEY,
                $COLUMN_RESTAURANT_NAME TEXT,
                $COLUMN_RESTAURANT_IMAGE INTEGER,
                $COLUMN_RESTAURANT_RATING REAL
            )
        """.trimIndent()
        
        // Create menu items table
        val createMenuItemsTable = """
            CREATE TABLE $TABLE_MENU_ITEMS (
                $COLUMN_ID TEXT PRIMARY KEY,
                $COLUMN_ITEM_NAME TEXT,
                $COLUMN_ITEM_PRICE REAL,
                $COLUMN_ITEM_IMAGE INTEGER,
                $COLUMN_ITEM_RESTAURANT_ID TEXT,
                FOREIGN KEY ($COLUMN_ITEM_RESTAURANT_ID) REFERENCES $TABLE_RESTAURANTS($COLUMN_ID)
            )
        """.trimIndent()
        
        // Create cart table
        val createCartTable = """
            CREATE TABLE $TABLE_CART (
                $COLUMN_ID INTEGER PRIMARY KEY AUTOINCREMENT,
                $COLUMN_CART_ITEM_ID TEXT,
                $COLUMN_CART_QUANTITY INTEGER,
                FOREIGN KEY ($COLUMN_CART_ITEM_ID) REFERENCES $TABLE_MENU_ITEMS($COLUMN_ID)
            )
        """.trimIndent()
        
        // Create orders table
        val createOrdersTable = """
            CREATE TABLE $TABLE_ORDERS (
                $COLUMN_ID TEXT PRIMARY KEY,
                $COLUMN_ORDER_ITEMS TEXT,
                $COLUMN_ORDER_TOTAL REAL,
                $COLUMN_ORDER_DATE TEXT
            )
        """.trimIndent()
        
        db.execSQL(createRestaurantsTable)
        db.execSQL(createMenuItemsTable)
        db.execSQL(createCartTable)
        db.execSQL(createOrdersTable)
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        db.execSQL("DROP TABLE IF EXISTS $TABLE_RESTAURANTS")
        db.execSQL("DROP TABLE IF EXISTS $TABLE_MENU_ITEMS")
        db.execSQL("DROP TABLE IF EXISTS $TABLE_CART")
        db.execSQL("DROP TABLE IF EXISTS $TABLE_ORDERS")
        onCreate(db)
    }
    
    // CRUD operations for restaurants
    fun addRestaurant(restaurant: Restaurant): Long {
        val db = this.writableDatabase
        val values = ContentValues().apply {
            put(COLUMN_ID, restaurant.id)
            put(COLUMN_RESTAURANT_NAME, restaurant.name)
            put(COLUMN_RESTAURANT_IMAGE, restaurant.image)
            put(COLUMN_RESTAURANT_RATING, restaurant.rating)
        }
        return db.insert(TABLE_RESTAURANTS, null, values)
    }
    
    fun getRestaurants(): List<Restaurant> {
        val restaurants = mutableListOf<Restaurant>()
        val db = this.readableDatabase
        val cursor = db.rawQuery("SELECT * FROM $TABLE_RESTAURANTS", null)
        
        if (cursor.moveToFirst()) {
            do {
                val id = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_ID))
                val name = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_RESTAURANT_NAME))
                val image = cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_RESTAURANT_IMAGE))
                val rating = cursor.getFloat(cursor.getColumnIndexOrThrow(COLUMN_RESTAURANT_RATING))
                
                // Get menu items for this restaurant
                val menuItems = getMenuItemsForRestaurant(id)
                
                restaurants.add(Restaurant(id, name, image, rating, menuItems))
            } while (cursor.moveToNext())
        }
        cursor.close()
        return restaurants
    }
    
    // Similar CRUD operations for menu items, cart, and orders
    // Implement getMenuItemsForRestaurant(), addMenuItem(), etc.
    // Implement cart operations: addToCart(), getCartItems(), updateCartItem(), removeFromCart()
    // Implement order operations: placeOrder(), getOrderHistory()
}
